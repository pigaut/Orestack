--- # ===== Stage 1: Depleted =====
type: depleted
block: white_wool
growth: 40

# 'on-break' defines a function triggered when a player tries to break a generator block
on-break:
  # 'do' defines one or more actions to execute
  do: chatMessage <&4This resource is depleted>

  # Optional modifiers
  chance: 0.6        # 60% probability of running this function
  delay: 60          # delay in ticks (60 ticks = 3 seconds)
  repetitions: 1     # number of times this function runs
  interval: 5        # ticks between repetitions (5 ticks = 0.25s)

---

--- # ===== Stage 2: Harvestable Gray Wool =====
type: ripe
block: gray_wool
growth: 40

on-break:
  do: chatMessage <&aYou harvested gray wool!>

on-click:
  # Trigger actions when a player interacts with the block
  if: clickTypeEquals right_click, left_click
  do: chatMessage <&aThis gray wool block is ready to be mined!>

on-growth:
  # Triggered when the stage grows; no player context available here
  do: chatMessage <&4This message will not be sent to anyone!>

---

--- # ===== Stage 3: Harvestable Blue Wool =====
type: ripe
block: blue_wool
growth: 40

# Multiple actions for the same trigger
on-break:
  do:
    - chatMessage <&aHarvesting blue wool...>
    - chatMessage <&aReceived x1 blue wool>

on-click:
  do:
    # Diamond brackets <> for parameters with spaces
    - <chat message> <This message has spaces!>
    # Single quotes '' for special characters like :{}[],?*&!|>'"%@`
    - 'chatMessage <You clicked a: {generator_tc} Generator>'
    # Double quotes "" for convenience with apostrophes
    - "chatMessage <You can't do that>"

--- # ===== Stage 4 =====
type: ripe
block: red_wool
growth: 40

on-break:
  - if: toolTypeEquals shears
    do:
      - chatMessage <&aHarvesting red wool...>
    else:
      - chatMessage <&4You need shears to harvest this generator>
      - cancelEvent

  - if-not: toolTypeEquals shears
    do: chatMessage <&4You are not holding shears, you cannot harvest this block!>
    else: chatMessage <&aYou are holding shears, you can harvest this block!>

on-growth:
  if-any:
    - chance 0.5
    - onlinePlayers 10-300
  do: playSoundAtBlock tin
  else: playSoundAtBlock tin_tin

--- # ===== Stage 5 =====
type: ripe
block: yellow_wool
growth: 40

on-break:
  - if-not: hasPermission orestack.generator.harvest
    do:
      - chatMessage <&4You don't have the permission to harvest this block>
      - cancelEvent
      - return

  - if-not: toolTypeEquals shears, fishing_rod
    do:
      - chatMessage <&4You need shears or a fishing rod to harvest this block>
      - cancelEvent
      - return

  - if-not: hasPermission orestack.generator.harvest.reward
    do:
      - chatMessage <&4There are no rewards for you, sorry.>
      - return

  - do:
      - giveItem diamond
      - chatMessage <&aYou found a reward! Added 1 diamond to your inventory.>

  # The Pattern shown here is called 'guard clauses' or 'return early',
  # it can be useful to execute complicated logic.

--- # ===== Stage 6 =====
type: regrown
block: lime_wool

on-break:
  # You can reference global functions stored in the functions folder
  - requireHarvestPermission
  - requireIronPickaxeOrBetter
  - do: chatMessage <&aHarvesting green wool...>